{"version":3,"file":"static/js/189.6d60afdb.chunk.js","mappings":"uJAGA,MA+BA,EA/BoBA,IAAe,IAAd,OAACC,GAAOD,EAC3B,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGH,EAAOI,KAAI,CAACC,EAAOC,KAClBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOL,SAAA,EACpBF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,0BAAyBL,UACtCF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CACHC,GAAI,UAAUL,EAAMM,GAAGC,UACvBC,MAAO,CAACC,gBAAiB,OAAOT,EAAMU,QAAQC,WAAWC,KAAKC,aAGlEX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaL,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,QAAOL,UACpBF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAI,UAAUL,EAAMM,GAAGC,UAAUT,SACpCE,EAAMU,QAAQI,WAGnBlB,EAAAA,EAAAA,KAAA,OAAKO,UAAU,OAAML,UACnBF,EAAAA,EAAAA,KAAA,QAAMO,UAAU,SAAQL,UACtBF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAI,YAAYL,EAAMU,QAAQK,YAAYjB,SAC7CE,EAAMU,QAAQM,wBAhBGf,MAuB7B,C,8GCtBP,MAgFA,EAhFegB,KAEb,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MAEdxB,EAAQyB,IAAaC,EAAAA,EAAAA,UAAS,KAI9BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,OAC5CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAGvCK,EAAAA,EAAAA,YAAU,KAERN,EAAU,IACVO,EAAYT,GACZO,GAAW,EAAK,GAChB,CAACP,IAGH,MAAMS,EAAc,SAACC,GAA2B,IAApBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACtCG,EAAAA,EAAAA,GAAa,yBAAyBL,eAAmBC,KACtDK,MAAMC,IACLC,QAAQC,IAAIF,GACZZ,EAAiBY,EAAKb,eACtBF,GAAWkB,GAAe,IAAIA,KAAeH,EAAKI,SAClDd,GAAW,EAAM,IAElBe,OAAOC,IACNL,QAAQM,MAAMD,GACdhB,GAAW,EAAM,GAEvB,EAUMkB,EAAkBnB,EAAU,YAAc,WAkBhD,OACE5B,EAAAA,EAAAA,KAACgD,EAAAA,EAAI,CACH9B,MAAM,kCACN+B,YAAY,oFAAkB/C,UAC9BI,EAAAA,EAAAA,MAAA,WAASI,GAAG,aAAaH,UAAWwC,EAAgB7C,SAAA,EAClDI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CAAI,gBAAEF,EAAAA,EAAAA,KAAA,MAAAE,SAAKoB,IAAc,oDACzBtB,EAAAA,EAAAA,KAAA,OAAKO,UAAU,sBAAqBL,UAClCF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CAACnD,OAAQA,OAGvBC,EAAAA,EAAAA,KAAA,OAAKO,UAAU,cAAaL,SACzBwB,IACC1B,EAAAA,EAAAA,KAAA,UAAQmD,QArCKC,KAClB1B,GAEDK,EAAYT,EAAUI,EACxB,EAiCwCxB,SAAC,6BAIlC,C,gDClFJ,MAEDmD,EAAU,CACdC,OAAQ,CACNC,WAAY,MAEdC,QAAS,CACP,iBAAkBC,qDAClB,kBAAmB,+BAKVpB,EAAeqB,UAC3B,MAAM,KAACnB,SAAcoB,EAAAA,EAAMC,IAAI,sCAAe3C,IAAOoC,GAEpD,OADDb,QAAQC,IAAIF,GACJA,CAAI,C","sources":["components/videos/VideoSearch.jsx","pages/Search.jsx","utils/api.js"],"sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst VideoSearch = ({videos}) => {\r\n  return (\r\n    <>\r\n      {videos.map((video, index) => (\r\n        <div className='video' key={index}>\r\n          <div className='video__thumb play__icon'>\r\n            <Link \r\n              to={`/video/${video.id.videoId}`}\r\n              style={{backgroundImage: `url(${video.snippet.thumbnails.high.url})`}}\r\n            ></Link>\r\n          </div>\r\n          <div className='video__info'>\r\n            <div className='title'>\r\n              <Link to={`/video/${video.id.videoId}`}>\r\n                {video.snippet.title}\r\n              </Link>\r\n            </div>\r\n            <div className='info'>\r\n              <span className='author'>\r\n                <Link to={`/channel/${video.snippet.channelId}`}>\r\n                  {video.snippet.channelTitle}\r\n                </Link>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VideoSearch","import React, { useEffect, useState } from 'react'\r\n//현재 경로에서 searchId파라미터를 가져옵니다.\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport Main from '../components/section/Main';\r\nimport VideoSearch from '../components/videos/VideoSearch'\r\nimport { fetchFromAPI } from '../utils/api';\r\n\r\nconst Search = () => {\r\n  //사용자가 입력한 검색어를 searchId로 저장\r\n  const { searchId } = useParams();\r\n  //검색 결과로 받아온 비디오 목록을 담을 상태\r\n  const [videos, setVideos] = useState([]);\r\n  //useEffect훅으로 컴포넌트가 마운트되거나 searchId가 변경될 때마다 유튜브 API를 호출하여 검색 결과를 가져옴\r\n  \r\n  //다음 페이지의 토큰을 저장, 이를 사용하여 API 호출 시 다음 페이지의 결과를 가져옴\r\n  const [nextPageToken, setNextPageToken] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //rapid API 사용\r\n  useEffect(() => {\r\n    //검색어가 변경될때마다 videos상태와 nextPageToken상태를 초기화, 새로운 검색어로 검색 결과를 다시 불러올 수 있게 함\r\n    setVideos([]);\r\n    fetchVideos(searchId);\r\n    setLoading(true);\r\n  },[searchId]) //searchId가 변경되면 useEffect함수 호출\r\n\r\n  //검색 결과를 가져오는 로직을 함수로 추상화(만듬), query(검색어), pageToken(다음 페이지 토큰)을 인자로 받음 \r\n  const fetchVideos = (query, pageToken = '') => {\r\n    fetchFromAPI(`search?part=snippet&q=${query}&pageToken=${pageToken}`)\r\n      .then((data) => {//API요청 결과를 data매개변수로 받음\r\n        console.log(data)\r\n        setNextPageToken(data.nextPageToken);//다음페이지의 토큰을 상태에 저장\r\n        setVideos((prevVideos) => [...prevVideos, ...data.items])//비디오정보를 상태에 추가\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {//오류가 발생하면 에러 메시지 출력\r\n        console.error(err)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  //더보기 버튼 클릭시\r\n  const handleLoadMore = () => {\r\n    if(nextPageToken){\r\n      //nextPageToken이 있을 때만 추가 데이터를 로드\r\n      fetchVideos(searchId, nextPageToken);\r\n    }\r\n  }\r\n\r\n  const searchPageClass = loading ? 'isLoading' : 'isLoaded';\r\n\r\n  //youtube API 사용\r\n  // useEffect(() => {\r\n  //   //5 fetch함수로 검색어와 API키를 쿼리 파라미터로 전달\r\n  //   fetch(`https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&q=${searchId}&type=video&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n  //     //6 API응답을 JSON으로 파싱\r\n  //     .then(response => response.json())\r\n  //     .then(result => {\r\n  //       console.log(result);\r\n  //       //7 결과를 setVideos함수를 사용하여 videos상태 변수에 저장\r\n  //       setVideos(result.items)\r\n  //     })\r\n  //     //8 오류 처리\r\n  //     .catch(error => console.log(error));\r\n  // }, [searchId]);\r\n\r\n\r\n  return (\r\n    <Main\r\n      title=\"유튜브 검색\"\r\n      description=\"유튜브 검색 결과 페이지입니다\">\r\n      <section id='searchPage' className={searchPageClass}>\r\n        <h2>😊<em>{searchId}</em> 검색 결과입니다.</h2>\r\n        <div className='video__inner search'>\r\n          <VideoSearch videos={videos}/>\r\n        </div>\r\n        {/*더보기 버튼 추가 nextPageToken이 존재할 때만 버튼을 렌더링 */}\r\n        <div className='video__more'>\r\n          {nextPageToken && (\r\n            <button onClick={handleLoadMore}>더보기</button>\r\n          )}\r\n        </div>\r\n      </section>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default Search","import axios from 'axios';\r\n\r\nexport const BASE_URL = 'https://youtube-v31.p.rapidapi.com'\r\n\r\nconst options = {\r\n  params: {\r\n    maxResults: '48'\r\n  },\r\n  headers: {\r\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\r\n    'x-rapidapi-host': 'youtube-v31.p.rapidapi.com'\r\n  }\r\n};\r\n\r\n//전달받은 인자(url)를 가지고 api키와 URL파라미터를 조립해서 함수를 호출한 곳으로 반환\r\nexport const fetchFromAPI = async (url) => {\r\n\tconst {data} = await axios.get(`${BASE_URL}/${url}`, options);\r\n\tconsole.log(data);\r\n  return data;\r\n}"],"names":["_ref","videos","_jsx","_Fragment","children","map","video","index","_jsxs","className","Link","to","id","videoId","style","backgroundImage","snippet","thumbnails","high","url","title","channelId","channelTitle","Search","searchId","useParams","setVideos","useState","nextPageToken","setNextPageToken","loading","setLoading","useEffect","fetchVideos","query","pageToken","arguments","length","undefined","fetchFromAPI","then","data","console","log","prevVideos","items","catch","err","error","searchPageClass","Main","description","VideoSearch","onClick","handleLoadMore","options","params","maxResults","headers","process","async","axios","get"],"sourceRoot":""}